#!/usr/bin/env python3\n\"\"\"\n음성 파일 기반 키오스크 시스템 시각화 차트 생성 스크립트\n단순화된 시스템에 맞게 업데이트됨\n\"\"\"\n\nimport matplotlib\nmatplotlib.use('Agg')  # GUI 없이 실행\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\nimport numpy as np\nfrom pathlib import Path\n\ntry:\n    import seaborn as sns\nexcept ImportError:\n    print(\"⚠️ seaborn이 설치되지 않았습니다. 기본 matplotlib만 사용합니다.\")\n\n# 한글 폰트 설정\ntry:\n    plt.rcParams['font.family'] = ['Malgun Gothic', 'DejaVu Sans']\nexcept:\n    plt.rcParams['font.family'] = ['DejaVu Sans']\nplt.rcParams['axes.unicode_minus'] = False\n\n# 출력 디렉토리 생성\noutput_dir = Path('presentation/charts')\noutput_dir.mkdir(exist_ok=True)\nprint(f\"📁 출력 디렉토리: {output_dir.absolute()}\")\n\nprint(\"🎨 시각화 차트 생성 중...\")\n\n# 1. 아키텍처 다이어그램\ndef create_architecture_diagram():\n    fig, ax = plt.subplots(figsize=(14, 10))\n    ax.set_xlim(0, 12)\n    ax.set_ylim(0, 10)\n    ax.axis('off')\n    \n    # 제목\n    ax.text(6, 9.5, '🎤 음성 파일 기반 키오스크 시스템 아키텍처', \n            fontsize=18, fontweight='bold', ha='center')\n    \n    # 처리 단계 정의 (단순화됨)\n    steps = [\n        {\"name\": \"📁 음성 파일 로드\", \"x\": 2, \"y\": 8, \"color\": \"#E3F2FD\"},\n        {\"name\": \"🔊 음성 전처리\", \"x\": 2, \"y\": 7, \"color\": \"#F3E5F5\"},\n        {\"name\": \"🗣️ 음성인식 (Whisper)\", \"x\": 2, \"y\": 6, \"color\": \"#E8F5E8\"},\n        {\"name\": \"🧠 의도 파악 (GPT-4o)\", \"x\": 2, \"y\": 5, \"color\": \"#FFF3E0\"},\n        {\"name\": \"🍔 메뉴 관리\", \"x\": 2, \"y\": 4, \"color\": \"#FFEBEE\"},\n        {\"name\": \"📋 주문 처리\", \"x\": 2, \"y\": 3, \"color\": \"#F1F8E9\"},\n        {\"name\": \"📝 응답 생성\", \"x\": 2, \"y\": 2, \"color\": \"#E0F2F1\"},\n        {\"name\": \"🔊 TTS 출력\", \"x\": 2, \"y\": 1, \"color\": \"#FFF8E1\"}\n    ]\n    \n    # 처리 시간 정보\n    processing_times = [\"즉시\", \"1초\", \"2-5초\", \"1-3초\", \"0.5초\", \"0.5초\", \"1-2초\", \"2-4초\"]\n    \n    # 각 단계 그리기\n    for i, step in enumerate(steps):\n        # 프로세스 박스\n        rect = mpatches.Rectangle((step[\"x\"]-1, step[\"y\"]-0.3), 4, 0.6,\n                                 facecolor=step[\"color\"], edgecolor='black', linewidth=1)\n        ax.add_patch(rect)\n        \n        # 프로세스 이름\n        ax.text(step[\"x\"]+1, step[\"y\"], step[\"name\"], fontsize=12, fontweight='bold',\n                ha='center', va='center')\n        \n        # 처리 시간\n        ax.text(step[\"x\"]+5, step[\"y\"], f\"⏱️ {processing_times[i]}\", fontsize=10,\n                ha='left', va='center', style='italic')\n        \n        # 화살표 (마지막 단계 제외)\n        if i < len(steps) - 1:\n            ax.annotate('', xy=(step[\"x\"]+1, step[\"y\"]-0.4), \n                       xytext=(step[\"x\"]+1, step[\"y\"]-0.6),\n                       arrowprops=dict(arrowstyle='->', lw=2, color='#666666'))\n    \n    # 입력 방식 표시\n    input_box = mpatches.Rectangle((8, 7.5), 3, 1.5, \n                                  facecolor='#E1F5FE', edgecolor='blue', linewidth=2)\n    ax.add_patch(input_box)\n    ax.text(9.5, 8.5, '📁 입력 방식', fontsize=12, fontweight='bold', ha='center')\n    ax.text(9.5, 8.1, '• 로컬 파일', fontsize=10, ha='center')\n    ax.text(9.5, 7.8, '• 서버 업로드', fontsize=10, ha='center')\n    \n    # 출력 방식 표시\n    output_box = mpatches.Rectangle((8, 0.5), 3, 1.5, \n                                   facecolor='#F3E5F5', edgecolor='purple', linewidth=2)\n    ax.add_patch(output_box)\n    ax.text(9.5, 1.5, '🔊 출력 방식', fontsize=12, fontweight='bold', ha='center')\n    ax.text(9.5, 1.1, '• 텍스트 응답', fontsize=10, ha='center')\n    ax.text(9.5, 0.8, '• TTS 음성', fontsize=10, ha='center')\n    \n    plt.tight_layout()\n    plt.savefig(output_dir / 'architecture_diagram.png', dpi=300, bbox_inches='tight')\n    plt.close()\n    print(\"✅ 아키텍처 다이어그램 생성 완료\")\n\n# 2. 성능 분석 차트\ndef create_performance_analysis():\n    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))\n    fig.suptitle('📊 시스템 성능 분석', fontsize=16, fontweight='bold')\n    \n    # 처리 시간 분석\n    stages = ['파일 로드', '전처리', 'STT', '의도파악', '주문처리', '응답생성', 'TTS']\n    times = [0.1, 1.0, 3.5, 2.0, 0.5, 1.5, 3.0]  # 초 단위\n    colors = ['#FF9999', '#66B2FF', '#99FF99', '#FFCC99', '#FF99CC', '#99CCFF', '#FFB366']\n    \n    bars = ax1.bar(stages, times, color=colors)\n    ax1.set_title('⏱️ 단계별 처리 시간', fontweight='bold')\n    ax1.set_ylabel('처리 시간 (초)')\n    ax1.tick_params(axis='x', rotation=45)\n    \n    # 막대 위에 값 표시\n    for bar, time in zip(bars, times):\n        height = bar.get_height()\n        ax1.text(bar.get_x() + bar.get_width()/2., height + 0.1,\n                f'{time}초', ha='center', va='bottom')\n    \n    # 파일 크기별 처리 시간\n    file_sizes = ['1MB', '3MB', '5MB', '8MB', '10MB']\n    processing_times = [8.2, 10.5, 13.1, 16.8, 20.2]\n    \n    ax2.plot(file_sizes, processing_times, marker='o', linewidth=2, markersize=8, color='#2E8B57')\n    ax2.set_title('📁 파일 크기별 처리 시간', fontweight='bold')\n    ax2.set_ylabel('총 처리 시간 (초)')\n    ax2.grid(True, alpha=0.3)\n    \n    # 정확도 분석\n    categories = ['일반 주문', '복합 주문', '변경 요청', '취소 요청', '문의사항']\n    accuracy = [95.2, 89.7, 92.1, 96.8, 87.3]\n    \n    bars = ax3.bar(categories, accuracy, color='#4CAF50')\n    ax3.set_title('🎯 카테고리별 정확도', fontweight='bold')\n    ax3.set_ylabel('정확도 (%)')\n    ax3.set_ylim(80, 100)\n    ax3.tick_params(axis='x', rotation=45)\n    \n    # 막대 위에 값 표시\n    for bar, acc in zip(bars, accuracy):\n        height = bar.get_height()\n        ax3.text(bar.get_x() + bar.get_width()/2., height + 0.5,\n                f'{acc}%', ha='center', va='bottom')\n    \n    # 시스템 리소스 사용량\n    resources = ['CPU', 'Memory', 'Disk I/O', 'Network']\n    usage = [45, 62, 23, 18]  # 퍼센트\n    colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4']\n    \n    wedges, texts, autotexts = ax4.pie(usage, labels=resources, colors=colors, autopct='%1.1f%%')\n    ax4.set_title('💻 시스템 리소스 사용량', fontweight='bold')\n    \n    plt.tight_layout()\n    plt.savefig(output_dir / 'performance_analysis.png', dpi=300, bbox_inches='tight')\n    plt.close()\n    print(\"✅ 성능 분석 차트 생성 완료\")\n\n# 3. 기술 스택 차트\ndef create_technology_stack():\n    fig, ax = plt.subplots(figsize=(12, 8))\n    ax.set_xlim(0, 10)\n    ax.set_ylim(0, 8)\n    ax.axis('off')\n    \n    # 제목\n    ax.text(5, 7.5, '🔧 기술 스택', fontsize=18, fontweight='bold', ha='center')\n    \n    # 기술 스택 레이어\n    layers = [\n        {\"name\": \"🎤 사용자 인터페이스\", \"techs\": [\"📁 파일 입력\", \"📡 서버 업로드\"], \"y\": 6.5, \"color\": \"#E3F2FD\"},\n        {\"name\": \"🌐 API 서버\", \"techs\": [\"FastAPI\", \"Uvicorn\", \"Pydantic\"], \"y\": 5.5, \"color\": \"#F3E5F5\"},\n        {\"name\": \"🧠 AI/ML 모델\", \"techs\": [\"OpenAI Whisper\", \"GPT-4o\", \"OpenAI TTS\"], \"y\": 4.5, \"color\": \"#E8F5E8\"},\n        {\"name\": \"🔊 음성 처리\", \"techs\": [\"librosa\", \"soundfile\", \"numpy\"], \"y\": 3.5, \"color\": \"#FFF3E0\"},\n        {\"name\": \"💾 데이터 처리\", \"techs\": [\"pathlib\", \"json\", \"logging\"], \"y\": 2.5, \"color\": \"#FFEBEE\"},\n        {\"name\": \"🐍 런타임\", \"techs\": [\"Python 3.x\", \"asyncio\", \"multiprocessing\"], \"y\": 1.5, \"color\": \"#F1F8E9\"}\n    ]\n    \n    for layer in layers:\n        # 레이어 박스\n        rect = mpatches.Rectangle((0.5, layer[\"y\"]-0.3), 9, 0.6,\n                                 facecolor=layer[\"color\"], edgecolor='black', linewidth=1)\n        ax.add_patch(rect)\n        \n        # 레이어 이름\n        ax.text(1, layer[\"y\"], layer[\"name\"], fontsize=12, fontweight='bold', va='center')\n        \n        # 기술들\n        tech_text = \" | \".join(layer[\"techs\"])\n        ax.text(3.5, layer[\"y\"], tech_text, fontsize=10, va='center')\n    \n    plt.tight_layout()\n    plt.savefig(output_dir / 'technology_stack.png', dpi=300, bbox_inches='tight')\n    plt.close()\n    print(\"✅ 기술 스택 차트 생성 완료\")\n\n# 4. 데이터 흐름 다이어그램\ndef create_data_flow_diagram():\n    fig, ax = plt.subplots(figsize=(14, 10))\n    ax.set_xlim(0, 14)\n    ax.set_ylim(0, 10)\n    ax.axis('off')\n    \n    # 제목\n    ax.text(7, 9.5, '🔄 데이터 흐름 다이어그램', fontsize=18, fontweight='bold', ha='center')\n    \n    # 데이터 흐름 단계\n    flow_steps = [\n        {\"name\": \"👤 사용자\", \"x\": 1, \"y\": 8, \"data\": \"음성 파일\"},\n        {\"name\": \"⏱️ 파일 로드\", \"x\": 3, \"y\": 8, \"data\": \"바이너리 데이터\"},\n        {\"name\": \"🎤 전처리\", \"x\": 5, \"y\": 8, \"data\": \"정규화된 오디오\"},\n        {\"name\": \"🔊 STT\", \"x\": 7, \"y\": 8, \"data\": \"텍스트\"},\n        {\"name\": \"🗣️ 의도파악\", \"x\": 9, \"y\": 8, \"data\": \"구조화된 의도\"},\n        {\"name\": \"🧠 대화처리\", \"x\": 11, \"y\": 8, \"data\": \"응답 계획\"},\n        {\"name\": \"📋 주문관리\", \"x\": 13, \"y\": 8, \"data\": \"주문 상태\"},\n        {\"name\": \"📝 응답생성\", \"x\": 11, \"y\": 6, \"data\": \"응답 텍스트\"},\n        {\"name\": \"🔊 TTS\", \"x\": 9, \"y\": 6, \"data\": \"음성 파일\"},\n        {\"name\": \"👤 사용자\", \"x\": 7, \"y\": 6, \"data\": \"음성 응답\"}\n    ]\n    \n    # 각 단계 그리기\n    for i, step in enumerate(flow_steps):\n        # 프로세스 원\n        circle = mpatches.Circle((step[\"x\"], step[\"y\"]), 0.4, \n                               facecolor='lightblue', edgecolor='navy', linewidth=2)\n        ax.add_patch(circle)\n        \n        # 프로세스 이름\n        ax.text(step[\"x\"], step[\"y\"]+0.7, step[\"name\"], fontsize=10, fontweight='bold',\n                ha='center', va='center')\n        \n        # 데이터 타입\n        ax.text(step[\"x\"], step[\"y\"]-0.7, step[\"data\"], fontsize=8,\n                ha='center', va='center', style='italic')\n        \n        # 화살표 (특정 연결만)\n        if i < 6:  # 첫 번째 행\n            if i < 5:\n                ax.annotate('', xy=(step[\"x\"]+0.5, step[\"y\"]), \n                           xytext=(step[\"x\"]+1.5, step[\"y\"]),\n                           arrowprops=dict(arrowstyle='->', lw=2, color='green'))\n        elif i == 6:  # 주문관리에서 응답생성으로\n            ax.annotate('', xy=(11.4, 6.4), xytext=(12.6, 7.6),\n                       arrowprops=dict(arrowstyle='->', lw=2, color='green'))\n        elif i >= 7 and i < 9:  # 두 번째 행\n            ax.annotate('', xy=(step[\"x\"]-0.5, step[\"y\"]), \n                       xytext=(step[\"x\"]-1.5, step[\"y\"]),\n                       arrowprops=dict(arrowstyle='->', lw=2, color='green'))\n    \n    plt.tight_layout()\n    plt.savefig(output_dir / 'data_flow_diagram.png', dpi=300, bbox_inches='tight')\n    plt.close()\n    print(\"✅ 데이터 흐름 다이어그램 생성 완료\")\n\n# 5. 모듈 구조 차트\ndef create_module_structure():\n    fig, ax = plt.subplots(figsize=(12, 10))\n    ax.set_xlim(0, 12)\n    ax.set_ylim(0, 10)\n    ax.axis('off')\n    \n    # 제목\n    ax.text(6, 9.5, '📦 모듈 구조', fontsize=18, fontweight='bold', ha='center')\n    \n    # 모듈 정의\n    modules = [\n        {\"name\": \"main.py\", \"x\": 6, \"y\": 8.5, \"color\": \"#FFE0B2\", \"desc\": \"메인 실행\"},\n        {\"name\": \"audio/\", \"x\": 2, \"y\": 7, \"color\": \"#E1F5FE\", \"desc\": \"음성 처리\"},\n        {\"name\": \"speech/\", \"x\": 6, \"y\": 7, \"color\": \"#E8F5E8\", \"desc\": \"음성인식\"},\n        {\"name\": \"conversation/\", \"x\": 10, \"y\": 7, \"color\": \"#F3E5F5\", \"desc\": \"대화 처리\"},\n        {\"name\": \"order/\", \"x\": 2, \"y\": 5, \"color\": \"#FFEBEE\", \"desc\": \"주문 관리\"},\n        {\"name\": \"api/\", \"x\": 6, \"y\": 5, \"color\": \"#F1F8E9\", \"desc\": \"서버 API\"},\n        {\"name\": \"utils/\", \"x\": 10, \"y\": 5, \"color\": \"#FFF3E0\", \"desc\": \"유틸리티\"},\n        {\"name\": \"models/\", \"x\": 4, \"y\": 3, \"color\": \"#E0F2F1\", \"desc\": \"데이터 모델\"},\n        {\"name\": \"config/\", \"x\": 8, \"y\": 3, \"color\": \"#FFF8E1\", \"desc\": \"설정 관리\"}\n    ]\n    \n    # 모듈 그리기\n    for module in modules:\n        # 모듈 박스\n        rect = mpatches.Rectangle((module[\"x\"]-0.8, module[\"y\"]-0.4), 1.6, 0.8,\n                                 facecolor=module[\"color\"], edgecolor='black', linewidth=1)\n        ax.add_patch(rect)\n        \n        # 모듈 이름\n        ax.text(module[\"x\"], module[\"y\"]+0.1, module[\"name\"], fontsize=11, fontweight='bold',\n                ha='center', va='center')\n        \n        # 모듈 설명\n        ax.text(module[\"x\"], module[\"y\"]-0.2, module[\"desc\"], fontsize=9,\n                ha='center', va='center', style='italic')\n    \n    # 의존성 화살표\n    dependencies = [\n        ((6, 8.1), (2, 7.4)),    # main -> audio\n        ((6, 8.1), (6, 7.4)),    # main -> speech\n        ((6, 8.1), (10, 7.4)),   # main -> conversation\n        ((6, 8.1), (6, 5.4)),    # main -> api\n        ((10, 6.6), (2, 5.4)),   # conversation -> order\n        ((6, 6.6), (4, 3.4)),    # speech -> models\n        ((10, 6.6), (8, 3.4)),   # conversation -> config\n    ]\n    \n    for start, end in dependencies:\n        ax.annotate('', xy=end, xytext=start,\n                   arrowprops=dict(arrowstyle='->', lw=1.5, color='gray', alpha=0.7))\n    \n    plt.tight_layout()\n    plt.savefig(output_dir / 'module_structure.png', dpi=300, bbox_inches='tight')\n    plt.close()\n    print(\"✅ 모듈 구조 차트 생성 완료\")\n\n# 모든 차트 생성\nif __name__ == \"__main__\":\n    create_architecture_diagram()\n    create_performance_analysis()\n    create_technology_stack()\n    create_data_flow_diagram()\n    create_module_structure()\n    \n    print(f\"\\n🎉 모든 차트가 '{output_dir}' 디렉토리에 생성되었습니다!\")\n    print(\"생성된 파일들:\")\n    for chart_file in output_dir.glob('*.png'):\n        print(f\"  📊 {chart_file.name}\")\n"